#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : require

layout (local_size_x = 128) in;


// Instance data (buffer_reference).
#include "geom_instance_data_br.glsl"


// Visible result data (buffer_reference).
layout(buffer_reference, std140) readonly buffer Visible_result_buffer
{
    uint results[];
};


// Indirect draw commands data (buffer_reference).
layout(buffer_reference, std140) readonly buffer Primitive_group_base_index_buffer
{
	uint primitive_group_base_indices[];
};

layout(buffer_reference, std140) readonly buffer Count_buffer_index_buffer
{
	uint count_buffer_indices[];
};

struct Indirect_draw_commands_data
{
    uint index_count;
    uint instance_count;
    uint first_index;
    int  vertex_offset;
    uint first_instance;
};
layout(buffer_reference) readonly buffer Indirect_draw_commands_input_buffer
{
	Indirect_draw_commands_data commands[];
};

layout(buffer_reference) writeonly buffer Indirect_draw_commands_output_buffer
{
	Indirect_draw_commands_data commands[];
};

layout(buffer_reference) buffer Indirect_draw_command_counts_buffer
{
	uint counts[];
};


// Params.
layout(push_constant) uniform Params
{
    uint                                 num_primitives;
    Visible_result_buffer                visible_result_buffer;
    Primitive_group_base_index_buffer    base_indices;
    Count_buffer_index_buffer            count_buffer_indices;
    Indirect_draw_commands_input_buffer  draw_commands_input;
    Indirect_draw_commands_output_buffer draw_commands_output;
    Indirect_draw_command_counts_buffer  draw_command_counts;
} params;


bool is_visible_lookup(uint instance_idx)
{
    return (params.visible_result_buffer.results[instance_idx] == 1 ? true : false);
}

void main()
{
    uint primitive_idx = gl_GlobalInvocationID.x;
    if (primitive_idx < params.num_primitives)
    {
        uint instance_idx =
            params.draw_commands_input.commands[primitive_idx].first_instance;
        if (is_visible_lookup(instance_idx))
        {
            // Add draw command to draw commands.
            uint draw_cmds_base_idx =  // @OPTIMIZATION: (vram) could make the `count_buffer_indices` a lookup for `primitive_group_base_indices` so that there would only need to be one index per primitive group instead of per primitive.  -Thea 2025/03/02
                params.base_indices.primitive_group_base_indices[primitive_idx];
            uint count_buffer_idx =
                params.count_buffer_indices.count_buffer_indices[primitive_idx];

            uint batch_offset =
                atomicAdd(
                    params.draw_command_counts.counts[count_buffer_idx],
                    1);

            uint copy_to = draw_cmds_base_idx + batch_offset;
            params.draw_commands_output.commands[copy_to] =
                params.draw_commands_input.commands[primitive_idx];
        }
    }
}

