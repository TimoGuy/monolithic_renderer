#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : require

layout (local_size_x = 128) in;


// Per frame data (set = 0).
#include "geom_camera_set0.glsl"

// Instance data (buffer_reference).
#include "geom_instance_data_br.glsl"

// Instance bounding spheres (set = 1).

// Matches `GPU_bounding_sphere`.
struct Bounding_sphere
{
    vec4 origin_xyz_radius_w;
};
layout(std140, set = 1, binding = 0) readonly buffer Bounding_sphere_buffer
{
    Bounding_sphere bounding_spheres[];
} bounding_sphere_buffer;


// Visible result data (buffer_reference).
layout(buffer_reference, std140) writeonly buffer Visible_result_buffer
{
    uint results[];
};


// Params.
layout(push_constant) uniform Params
{
    float                 z_near;
    float                 z_far;
    float                 frustum_x_x;
    float                 frustum_x_z;
    float                 frustum_y_y;
    float                 frustum_y_z;
    uint                  culling_enabled;
    uint                  num_instances;
    Geo_instance_buffer   instance_buffer;
    Visible_result_buffer visible_result_buffer;
} params;


bool is_visible(uint instance_idx)
{
    if (params.culling_enabled == 1)
    {
        uint bounding_sphere_idx =
            params.instance_buffer
                .instances[instance_idx]
                .bounding_sphere_idx;
        vec4 origin_xyz_radius_w =
            bounding_sphere_buffer
                .bounding_spheres[bounding_sphere_idx]
                .origin_xyz_radius_w;
        vec3 sphere_origin =
            (params.instance_buffer.instances[instance_idx].transform *
                vec4(origin_xyz_radius_w.xyz, 1.0)).xyz;

        // @TODO: IMPLEMENT.

        return true;
    }
    return true;
}

void main()
{
    uint instance_idx = gl_GlobalInvocationID.x;
    if (instance_idx < params.num_instances)
    {
        params.visible_result_buffer.results[instance_idx] =
            (is_visible(instance_idx) ? 1 : 0);
    }
}
